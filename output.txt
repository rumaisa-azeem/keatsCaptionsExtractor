
Hello, welcome back to PPA, and we are in the middle of looking through some of the basic kinds of statements that we can see in very simple Java applications. Apart from the basic class structure that we have discussed before, the statements we have seen so far were the return statement and the assignment statement. And today, I will show you the next, and one of the most, sort of, basic kinds of statements. And they called 'conditional statements'. Sometimes they're also called 'if statements', and 'if statement' and 'conditional statement' is the same thing. Conditional statement is the more formal expression. And we often call if statements because the keyword that we will see in the statement in Java and an almost every other languages is 'if'. So, if we look at the purpose of this statement, we can think back to the behaviour we have observed about the ticket machine. We saw that it was doing various things incorrectly, it was inadequate. There were no checks on the amounts that we could enter. We could enter negative amounts and the machine didn't complain. It didn't give us any refund. There was no check that it was sensibly initialised. It was printing tickets all the time independent of what we were doing there. So let us first just go to our ticket machine and see how we can improve this. We have already seen in the last video, where we looked at the the printTicket method, why it is that it wasn't functioning properly. So here was the printTicket method and we saw that it prints out a ticket in every case. Now, I will go and fix this method using a conditional statement. Because the behaviour you want out of this, of course, is that we want the machine to print a ticket only when there is enough money inserted into the machine. And so the the place where we store the information how much money has been inserted, looking again at our fields, – here we have the price balance and total fields here – is our balance field. The balance field holds the money that was inserted so far towards the next ticket, and the price is also important, is the money that needs to be inserted to print a ticket. So essentially what we want to say is: We don't want to print a ticket in all cases. We want to print a ticket only if the balance is at least as high as the price. So we can write this here. I'm now starting to type Java code. I can say: 'if balance is greater than the price'. And I have an opening bracket, and here I have a closing bracket. And now you see that you have two brackets here at the same level of indentation, and you have this all at the same level of indentation. So before I do anything else, I'll talk a little bit about layout of Java code. We use indentation to make the program a lot more readable to a human reader. For example, every time a methods starts, we indent here by four spaces. That is: one indent level. And the same where the class starts. Here starts the class, and we indent by one level. So we see that there's always an indentation and we position the matching brackets, this closing bracket and the opening bracket, so that they line up under each other, and that makes it easier to read. But the Java compiler actually doesn't care. So I could write my code and put the closing bracket here, which would look odd, but the Java compiler doesn't care, it would work. I can also actually put it on the line here, so this is the closing bracket now for this bracket, the formatting, you know, where the line breaks are, and where spaces are, the Java system doesn't care about. So if I write it like this, this looks completely messy, but it works, it is correct Java code. The compiler doesn't tell you that you have to do it any different way. So this would be perfecly functional Java code, but it's considered extremely bad practice because you will annoy everyone else who has to read your code. It makes it much, much harder to read. So if I have something like this, and in fact I could use no indentation at all, if I do this, and then I go to 'Edit' and I say 'indent less' so that I remove the  indent and I can do that again, indent less. So if I just remove all the indentation here, this code still works. But it is incredibly badly written code, because if you have long programs and they are written like this, it is much harder to detect the structure, and that is especially true for other editors. BlueJ at least shows you with these colored backgrounds a little bit about the structure. Not all Java editors do that. And then it becomes incredibly hard to read. Luckily, there is help because here, where we have an opening curly bracket, and a closing curly bracket, it means everything else in between should be indented. BlueJ has a function that can clean that up for you automatically. There is a Auto Layout function here and the menu, if you do that, it fixes the indentation for you. See, all the invitation here that I messed up as fixed again, and this is now fixed. So here, if you have a statement that has a pair of curly brackets as part of the statement, everything else that you write between these curly brackets, we write one level indented, because it becomes easier to read. A pair of curly brackets is called a 'block' in Java, and block defines a 'scope'. We will talk about scopes later on. They have an important function, but the name for the Java construct is a block. So essentially the body of a method is a block. It is a pair of curly brackets with some statements in between. The body of an if statement is a block. The body of the whole class is a block. So we are writing Java programs essentially by writing nested blocks. And here, for the positioning of the curly brackets, they are two different styles. You can either write the bracket itself on a new line and then the opening and the closing brackets are aligned exactly on top of each other. Or you can write the opening bracket at the end of the line of the statement it belongs to. So this block belongs to an if statement, so you write the opening one at the end of the if, and then the closing bracket goes directly under the keyword that opened the block. Typically what we do in  our style guide in PPA: We use this style where the bracket is alone on a line for the class and the methods. But for all further nested statements that we use, we use the style where we have the bracket at the end of the line. So in this case, we're saying, if the balance is greater than the price, then we print the ticket and do something else. And if it isn't, we just don't do it. So we can try that out. And again, because I've made a change to the code, I first need to compile and then I can create another object. And so if I make a ticket that costs 400, and then I insert 200, and I try to print a ticket, nothing happens. But if I insert another 300 and then I try to print a ticket, there I get a ticket. Okay. Now let me clear the terminal so that we can see it. I can also open the object so that we can look into it again. And the price is 400. There is an error in here, and if you have paid attention, well, you may have seen that. And I can demonstrate it like this. The balance at the moment is 0. So let me insert four pounds. I put that in here. So now I have enough money in here. I try to print a ticket and nothing happens. Why does nothing happen? We can look at our code. It prints it only when the balance is greater than the price. But now at the moment, if we look at our object, the balance is actually equal to the price. If it is equal, it should also allow me to print a ticket. That is in fact a very common situation. So actually I need to fix this. This code is wrong. It should say: If the balance is greater or equal to the price. And that is written in Java like this, with a greater and an equal symbol in this sequence. So this now says if balance is greater or equal to price, then we print the ticket. Let's try that out. Compile this, create a ticket machine again. Every time you compile, the objects get removed, that is necessarily so. So I have again a ticket machine for four pound tickets. I insert four pounds. And I try to print a ticket. And it has printed the ticket, that is good. And it has taken my money. That is also good. And I can now not print another ticket. If I try to print another ticket, it just doesn't print. So we have fixed the error that tickets get printed when there's not enough money in there. We haven't fixed the error that it takes too much money. So if I know, for example, insert 800, because I want to print two tickets, and I print one ticket – it prints the ticket, but it has taken all the money out of my balance, taking all the 800. If I now try to print my second ticket, it doesn't work. We can fix that as well. We can say: instead of total is total plus balance and the balance is 0 – this is the taking all the money – we can just say: total is total plus price. So we don't take the whole balance, we just take the price. And we set the balance to balance minus price. So we are taking only the price of a ticket out of the balance and add it to the total, and the balance should then remain. Let's try that out: compile it, create another object; I make it again four pounds. I clear this window for moment so that we can see better than something gets printed. I open this up so that we can observe what's going on. Let's look at the balance now. I insert 800 because I want to print two tickets. So I've got eight pounds here in my balance, I print a ticket now, one ticket is printed, and 400 pence have been taken, and 400 left in the balence. And so if I click printTicket again, I can print a second ticket, and it's taken that out of my balance. So that works now much better. This is the first version of a conditional statement. Let's look at this a little bit more in a formal way. So an if statement is about making choices. Making choices is a very common thing. You do that all the time in your everyday life. You often make choices that are of the kind of 'if this is the case,  then I do this, and if that is the case, then I do something else. For example, if I have enough money, I'll go out for pizza, and otherwise I do something else. Many of you may have seen flowcharts if you have had programming in school. They looked usually something like this, where you can draw the functionality of an if statement in a chart like this, if you have an if.  In this case, I have a 'then case' and an 'else case'. In what I just wrote in BlueJ, I had only a then part and no else part. I will talk about that in a second. If we look at that in Java code, an if statement looks like this. If I have enough money, then I will go out, and else I will stay at home. Everything that's written in black on the slide is literal exact Java code and has to be written exactly like this. So you have to have the word 'if' here, you have to have a round bracket here, you have to have curly brackets. And what is written in blue has to be replaced by some proper Java code. But you can see here that the if statement is actually longer than what I've just written. I have just written in my example 'if, bracket, bracket', and I ended it here. And that is because the else part of an if statement is optional. You can have an 'if' without the 'else', or you can have an if with the 'else'. If you don't have an else part, the the meaning of that is just: If the if condition is not executed, otherwise, nothing is done. So if we look at how that actually is build up: There's the if keyword and then here between the round brackets is what's called the 'condition' of the if statement. The condition some expression that can be evaluated and results in a boolean result. A boolean result means that it results into the value true or false. In our case, what we had done here is, if we look at this, we have written balance is greater or equal to price. That expression is a boolean expression, because when we evaluated it, it is either true or false. And then depending on the result, whether it's true or false, we will execute either the then part or the else part of the if statement. If the condition is true, the first body gets executed. And if the condition is false, the body of the else part gets executed. So as I said, the else part is optional, but we can add it here. So I can say here, at the end of my if statement, I can add an else part. I can say 'else', and then the question is: What should we be doing when there is not enough money in there? We can say System.out.println. "Please enter more money". And that has to be a semicolon at the end of a Java statement. So if we try this out, now, compile this again, create my ticket machine. And I clear the screen here so that we can see this better. And let's say, I insert just two pounds and I try to print a ticket. It just says: Please enter more money. So now clearly the else part was executed. Let us look at one more quick example how we can write an if statement. For example, here, the insertMoney method was also not really functional because it allowed us to insert negative amounts, which should never happen. So I could prevent this as well by just saying: If the amount is greater, let's say greater than 0 – doesn't need equal to 0 – then we add the amount. And else, because that should never happen, if the amount is now negative, what shall we do? Because if the amount is negative, that's not something that the user has done wrong because they can't insert negative coins. If the amount is negative, it probably indicates that there is a programming errors somewhere in our program because this is something that should never happen. So this is a kind of system error. I can, first of all, as a first approximation, just print that out again as well: System.out.println, and say amount should not be negative. And so if I do this now, if I compile this, and i try this out, and I have a ticket machine, and I try to insert a negative amount, it just says: 'amount should not be negative'. So, as a first approximation, that is okay. At least now something doesn't go wrong. But in fact, in good software development, printing out a message here is probably not what we should be doing, because if this is a system error, the user can't do anything about it. And so we will later learn a proper mechanism, how we can deal with errors, because this is an internal error. This is probably indicating a programming error somewhere else in the program if this ever gets called with a negative amount. So we should be dealing with the error in another way. Proper error handling is a little bit tricky. So we will discuss that only in the second term properly, with a full discussion of how this is done. Even proper programmers often do that incorrectly and just display a message, as I have done, to the user. But that is not always useful. I have here actually a few examples on my slides where I have seen that programmers have done this, where they have just shown a message to the user when it's actually inappropriate to do so. In real life, that does happen. So that's our method. Here is a case. That's at Heathrow. I was looking at the display of the flights. And here the programmer has just popped up the message and written something on the screen. If you write the software for such a system, you know, just displaying a message to the user is obviously not the right thing to do. What can the user do about it here? So this is just an example of of really bad software design. But despite being bad, actually not that uncommon. That's not the only one I've seen. This was in the science museum. A very nice interactive display with a Windows error message painted on the screen where clearly didn't make sense. This is another one at an airport that happened somewhere else as well. This is an ATM, one of the most scary ones: Something went wrong, and you see that suddenly it reboots into Windows. Not exactly what you want to see when it has your credit card in there. Let's end for today. What we have seen here in the last example is what's called a 'protective mutator'. That is, when you add an if statement that makes sure when you call a mutator, that when you call it with invalid parameters, that the mutation doesn't happen so that it does not put your object into an invalid state. So typically in a mutator that text parameters there should be an if statement that checks whether the parameters are valid, whether it leads to a legal state of the object, and if it doesn't, you should protect your object from being put into an invalid state. That's all for now. That was enough about if statements and mutators. We will see a lot of if statements, and you will become familiar with them fairly quickly. They are very common and not a terribly difficult statement to write. So practice a bit with them, write some code with if statements, and then go on to the next video. Bye-bye.
