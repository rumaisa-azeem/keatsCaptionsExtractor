
Hello and welcome to the PPA course. Today, we are going to start really with the contents of the course, with talking about object oriented programming, how to learn it, what it is, what it can do, and how we go about programming. The previous videos were welcome and introductory videos to get you settled in. But today is where it's going to get interesting because now we're actually starting to talk about programming. What we're going to talk about today is classes and objects. You know that the style of programming that Java uses, and that's what we're going to use here, is called object oriented programming. So that is the word 'object' already in the name of the style of programming. So that's a very important aspect, and you will find, the more you understand, that the concepts of classes and objects is fundamental to structuring the program. At the beginning, when people start learning programming, they always think it is all about what you need to write to write a computer program. You know, what the statements are, where the semicolons go, where the brackets go, what the syntax is, and they think about, you know, learning to write an if statement or so, that's learning to program. At the end, as you go on in learning to program, you will see that that is actually the trivial aspect of it and not the interesting or difficult aspect at all. You will all learn how to write a Java program syntactically.  So you will all learn what an assignment is and what an if statement is and what a loop is, and how to write them, and the syntax of those. And after a fairly short while, after just a few weeks, that actually suddenly appears easy and trivial. What programming really is about is how to translate a problem into a programmable solution. That is, how to think about problem-solving, how to structure your thinking about a problem, how to translate that into a structure that can be programmed. So this thinking up the solutions at a larger level of problems that you want to program, that's where all the fun is. And that will remain challenging, always, because the better you get, the bigger problems you set yourself, and you can always set yourself some problems that are difficult. The language itself, you will know very well at some point. But solving problems will always remain fun and challenging. And for object oriented programming, classes and objects are at the core of what we need to understand to create these solutions. We will see that every program that we write in Java is structured into classes. And that is where the distinction lies between good programmers and bad programmers: How good are the solutions that you can come up with? How good is the class structure of your problems? At the moment, for those who haven't programmed yet, that will not mean anything. But don't worry, we will explain that step-by-step over the coming weeks. So the first thing we have to understand is: What is a class, and what is an object? That's the goal of this short video that you're watching now. The idea is quite simple. Let me go to a slide. So, I have something that I can show you in writing here. So. Have a look at this. Classes and objects, the two most fundamental concepts in object oriented programming. If we look at a formal definition of it, a class is a category of a thing or a type of thing. It is sometimes in programming described to be a template or blueprint, whereas the object is the thing itself. The object is an individual thing. An object belongs to a particular class and it has individual characteristics. Okay, so far, so good. These definitions or these explanations that are on the slide here sound fairly trivial, but it's still not really very easy to interpret what that means. So let's go back and look   at an example. So if we try to interpret what that actually means: If I say "chair". So I just throw at you this word "chair". And I ask you: Is that a class or an object? Think about that for a second. What would you say? Chair, class or object? Well, in your mind you may have now decided one way or the other. It is actually, when I say chair, it is somewhat ambiguous. But if I just talk about, if I don't say anything more, if I talk about chairs and general, if I say, well, this afternoon, I will go out and look at chairs, because I want to buy a new chair, then I'm clearly talking about the class 'chair', because I'm talking about chairs in general. So chair, if I talk about it without any further specifics, I'm talking about chairs in general, and I can say some things about chairs in general. I can say: Chairs are meant for sitting on, chairs typically have four legs. Not all of them have, there are some... office chairs have a sort of single thing with wheels. And chairs may have arm rests or maybe not. Chairs usually have a backrest. So I can make some statements about chess in general. And when I do this, I'm talking about the class chair. But what if I ask: What color is a chair? You will find that you cannot really reasonably answer that until I talk about a specific chair. Because chairs can have all sorts of color. But chairs have it color. Typically, for every chair, you could say what the color is. So we know that every chair has a color or several colors. But the specific color is specific to each chair.  So I can't answer the question about the color until I talk about a specific chair. That is, because if I'm talking about chairs in general, I'm talking about the class. So if I say: Here, this one, this chair here. Now, if I talk about this chair, that's an object. As soon as you talk about a specific chair, then you're talking about an object. So this thing here is a chair, which is an object of the class Chair. The class chair describes all chairs in general. An object chair is one specific chair that you can touch, that you can see, that you can describe. So once we're talking about an object, if I, say, talk about this chair, then you can also answer the question: What color is this chair? And I can see here, mine is black. So, when we're talking about objects, we can describe specific characteristics. So if I say, for example: A car. If I talk about cars in general, what is that: class or an object? Obviously a class. By what I've just said, about cars. But if I look out the window here, I can say: That white Prius that is parked down there out my window, that is an object. So as soon as you are talking about one specific one, you're talking about objects. And then there's of course a relationship between classes and objects. And that is: For every class, there can be many objects. So for class Car, there are millions of objects out there. There are millions of cars. Objects can come and go. Cars can be built, then you have more objects of the class. Cars can be destroyed, then you have fewer objects of the class. But the class pretty much is a universal concept that's always there. Even if there are no objects anymore, it is still there. So the class 'Dinosaur', for example, we know what that is. We can talk about dinosaurs. There are no objects existing anymore of that class. There are no dinosaurs anymore. But that doesn't matter. And that doesn't mean that the class doesn't exist anymore. We can quite reasonably talk about the class. We can talk about the world, typically by talking about classes. And then we can interpret the world. We can see the world by looking at objects of these classes. It gets a little bit more interesting when we look at things like... So if I say, let's say we've just been talking about cars. If I say 'Toyota' – Is that a class or an object? Think about it for a second. Toyota is a specific car. So is it an object? No, it's not an object, because they are still many of them, right? Toyota is still a class  because there are many Toyota cars, so there are many objects in that class. But it is somehow also not the same as car because there are fewer Toyotas than there are cars. So it is a specific version of a car. And in terms of object oriented programming that is called a 'subclass'. A subclass is a class that describes a subset of the objects of the 'superclass'. So the superclass is car, it has millions of objects. A subclass is Toyota. It has fewer objects, still quite a lot, but it's a subclass of all the cars. And so classes have relationships. There are superclasses and subclasses. And then there are objects that belong these classes. That is the general idea  of objects and classes. And we will, from the next video, we will see how we use these concepts in programming. You will see that when we write Java programs, we actually – with the programs that we write – we describe classes. And then, when we execute our programs, we create objects of those classes. And they can do certain things. Everything we program can be described as classes and objects. So if you have a computer game, and let's say you go round and shoot at things. I'm not a great fan of shooter games, but I know they're popular. Many of you will know them. Then you have a lot of objects in there. You have the player itself as an object, every enemy is an object, your weapon is an object, you ammunition is an object. If you have other kinds of computer games, let's say you have a simulation game, you have SimCity. Then the city is an object, every house is an object, every street is an object, every car is an object. It doesn't matter what game you have. You can describe it as objects. And these objects are organized into classes. So all the cars in your simulation or a class, all the streets in your simulation are a class, and so on. But it also works for all sorts of other software. So if you look at a word processor: Every character on screen is an object, every word is an object. Every paragraph is an object, every document is an object. And these objects have characteristics. For example, a paragraph has a font style and the text color and so on that can be described as classes and objects. And once you think about it, you will see that every program can be described as classes and objects. So if you look at Twitter, every tweet is an object, every user is an object. So a profile is an object. And you have classes of them. You have many users, you have many tweets. So there's classes of tweets, there are classes of many other things, you know, direct messages and so on. Every problem in the world could be thought of as an interaction of objects that are organised into classes. And that is what we will do when we write Java programs. Think about this for a bit, go around the world, look around you, see how the world around you is organized into classes and objects. And in the next video, I will show you what that means in the context of a Java program. That's all for now. It's not very hard to understand. Quite an easy sounding lesson for today. But you will see that it is really, really fundamental. We will come back to these fundamental ideas over and over again over this course. So let it sink in. It is important that you have it clear in your head. That's all for today. See you next time. Bye bye.
