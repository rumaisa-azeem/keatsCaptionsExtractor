
Hello, welcome back. Today in PPA, we're going to start talking about the fundamental concepts of object oriented programming, actually in the context of programming. In the last video, I talked about objects and classes in general. And now we will look at what that actually means for Java programming. So what I'm going to do is I'm going to switch to my screen here. So what I've got here on my screen is a BlueJ project that I have open. As it says on the course webpage, you will have seen that we will use BlueJ for this course. BlueJ is an integrated development environment that is specifically developed for teaching and learning to program. And so we would like you to use this initially. Some of you will already have programmed in other environments. For Java programming, there are a good number of programming environments available. IntelliJ is probably the most popular at the moment. There's also Eclipse and NetBeans. All of them are free or at least have free versions of them. And they're good environments, but they actually hide a lot of the conceptual structures. So when you program in those environments, you're expected to know a lot. BlueJ is different in that it is much more interactive and visual in terms of the object and class structures. And that will help you initially with developing the right understanding of objects and classes. So even if you already have some experience and think, you know already quite a bit about object oriented programming. I would like to ask you to still use BlueJ initially, at least. A little bit later on, you can migrate to other environments if you think you're ready. But you will see that there are advantages in the illustration and interactions and understanding, that BlueJ allows you to do things that you can't do in other environments. And where hopefully the interactions and visualizations will help your understanding of the fundamental concepts. So after watching this video, you should do yourself the kinds of things that I'm showing you here today. What you should be doing is you should download and install BlueJ on your own computer. And there's also a link on the KEATS webpage for the book projects. You should download the book projects. It's a zip file, you unzip it and then you have a whole folder structure. And this particular project that we're looking at today is part of the book projects. You will find that in chapter one of the projects. It's called 'figures'. And so I'm going to need my glasses whenever I actually have to read something on the screen. So, let's start to have a look at this. So here, on our screen we see, when be open BlueJ, and when we open a particular project in BlueJ – and here I have the figures project open – what you see on screen is a few lines and boxes. That is a class diagram. So that class diagram shows you the classes that are involved in this project. In this particular project, we have already some classes here that have been written already. So we're not starting with a blank screen. Someone already has written something. There are classes called Canvas, Circle, Square, Triangle, and so on. And the arrows between the classes show some relationships and we will discuss those a little bit further later. But in short, the arrows we're seeing here are a kind of "uses" relationships. So the Circle class uses the Canvas class, and the Square class uses the Canvas class, and so on. What we can do, in BlueJ , when we have a class that has been written in our project – so if you look at the class Circle, for example – I can right-click on it and I get a context menu. And in this context menu, I have a number of options. And the first option here is the most important one: it says "new Circle()". And "new Circle()" is an instruction, it is actually a Java instruction, that creates a new object of this class. From the discussion in the last video, you should be able to tell that Circle in its general form is a class. If I say "new Circle()" I'm creating an object of this class. So I'm going to click this now. In reaction, I am getting a dialogue here that asks me for a name of the instance. And here is the first sort of ambiguity coming in. It says "instance" here. I have before talked about "objects". In object into programming the terms instance and object are almost interchangeable. They pretty much mean the same thing. So an instance is an object. An incidence is one instance of the class Circle in this particular example here. Often, when we talk about objects, when we want to emphasise that this object is of a particular class, we use the term instance. We say this is an instance of a Circle. So if I click OK, because the default name here is "circle1"  – that's good enough for me. I don't care so much about the name. I click OK. And then here, down here, on this area of my window, which is called the "object bench". On the object bench, I get a representation of this Circle object. So this red blob here is a representation of a particular Circle object. And if I right-click on this Circle object, I can see that I get  another context menu. And in this context menu of the object, I have here a number of operations that I can now perform on this Circle object. So this Circle offers me a number of operations that can be performed on it. The first interesting one is this one: "makeVisible". So I'm going to click on makeVisible. And then this window here appears, and that has my circle object now drawn on the window. So I have asked this circle object to make itself visible. In reaction, that circle has painted a representation of itself into my window. This window, by the way, is an instance of the Canvas class. So an instance of the Canvas class is this whole window itself that allows me to draw shapes on them. And so I can see what else the circle can do. If I look, if I right-click it again, I can see here is a 'moveDown' operation. So if I select moveDown – that circle on the screen just moved down a little bit. I don't know whether you have seen that. If you look closely, we can – if we just arrange that a bit like this, so keep an eye on the blue circle here, I will click moveDown again. And if you look over, you see moves down. And so by saying moveDown to the circle, I can gradually move it down. There are also other things. There is a 'moveLeft', I can move it to the left and so on. I can also – and this is very important now – create another circle. So I can create another circle. Click OK, I've got a representation of the circle. I tell this circle to make itself visible. And there it is. And I tell this circle to move right, and it moves right. I can also create other shapes. I can create a square and say makeVisible to the square. And here I have a square. So what this is telling me is if I have classes, I can create objects of these classes. And I can interact with these objects by invoking the operations that they offer. Now, let's introduce a bit of Java terminology. These operations that are offered by each object are called "methods". So in Java, every operation that can be performed on an object is called a method. These methods are supplied by the object itself, so you can't just do anything you want with it, at least not as long as you can't write a program. You can just ask the object what methods it can perform and then you can select what you want. These methods are actually defined, as you will see, in the class of the object, not in the object itself. So the class of the object will specify what methods are available on every object. So essentially the class will determine what can be done with a circle. And the result of that is that the methods, the selection of methods that I have, is actually exactly the same for every object of that class. So if I have a changeSize method here with a new diameter, I have the same method for the other circle, whereas here on the square, there is, you will see there is a changeSize method that is just slightly different. It has a different name here. If I look at a triangle, for example, and I create a triangle, you will see here the changeSize method has two parameters. It says newHeight, newWidth, so it looks different. Even though the methods between the different classes in this case are all quite similar, they are actually slightly different and you will see that a different class may have an entirely different set of methods. In this case, they are similar but slightly different. The set of methods is determined by the class of the object. We also have seen that once you have a class, you can create as many objects as you'd like. I can create a third circle. And I make this one visible. And now look what happens if I make the circle visible. There is a third circle. If I create another square and I make this one visible, we see nothing happening. What went on here? Why did nothing happen? If you think about it, it is actually the case here that every one of those shapes, every square, for example, has a default size and color and position. And this square actually was just created exactly on top of the previous square. So if I go to this square and say moveRight, you see something changed here and I can move it down now. And there you see I have actually two squares that we're just sitting right on top of each other before. Another thing that we can do is if you look at the square here, if we look at the exact wording of the methods here in the menu, you see moveDown, there's the word moveDown. There is also something in front and something behind. Behind, which looks almost like a 0 or something – a round shape – it's actually a pair of round brackets. It's an open bracket and closing bracket. Two parentheses with nothing in between. And in front of the name of the method is the word 'void'. And we will discuss in a moment what that means as well. But let's look at the two parentheses behind the method name for a moment. Because here we have some examples where there is something between the parentheses. So here we have changeColor or changeSize. And if we look at change... Let's look at changeSize first. changeSize says between these parentheses "int newSize". This specification between the parentheses that are at the end of a method name is called a "parameter". A parameter is an indication that this method requires some extra information to execute. So if I select the changeSize  method of this square, a dialogue pops up. When we invoked a method that – again, I'm introducing Java terminology here. So every time I select a method in the menu, we say we are "invoking the method". Invoking the method is essentially executing the method and telling this object to do whatever that method says. So if I invoke the moveRight method, I'm telling the object to move right. Now. If that method had no parameter, that is, if in the menu it had an opening and closing parenthesis with nothing in between, and I invoke the method, the object will just go and do it. So if I say moveDown, the object moves down. If, on the other hand, the method requires a parameter, so here the changeSize method says here in its definition that it requires a parameter, and that parameter is the new size that I want this, in this case, a square to acquire. If there is a parameter required, then when I invoke the method, I now have to supply a value for the parameter. So the changeSize method is, in a sense, asking me, well, what size do you want to change it to? And the definition of a parameter always consists of two words. In this case it is "int newSize". The second one of those words, "newSize", is the name of the parameter and it's always a name that is chosen to give me a hint what this parameter is used for. So here the parameter is called newSize, and that's telling me: Whatever you're typing in here will be the new size of this square. And the first word here is called the "type" of the parameter. And that's the word "int". Now, Java has several different data types. We will talk about them in more detail a bit later. But the fundamental thing, it is important to understand that in programming, that different types of data are treated differently. For example, numbers are treated differently from text. And in fact, there's a distinction within numbers. So whole numbers are treated differently from decimal numbers. And so whenever we are working with a piece of data, we essentially annotate it by saying what type of data we're expecting here, what type of data we're dealing with. An int is short for integer, and integer means a whole number. So that word int here is telling us that for this parameter newSize, what we expect it to type in is a whole number. So if I type in here, for example, 200 – it's a whole number – and then I click OK. And I've now changed the size of this red square to 200 pixels. And we see it has become much bigger. I can do the same here, our first circle, if I do changeSize, and here the name of the parameter is newDiameter, and I change that to 12. Click OK. We see that circle has become very small. I can also change something else. So let's see, let's go to this circle here. And I select the changeColor method. And again, we see that the method has a parameter: it says "String newColor". So if I click it, the dialogue pops up as expected to let me enter the color. But this time, the type of the parameter is not int, it is String. And the type String means that in this case there's a bit of text expected, so not a number but text. A string is a sequence of characters. So it is text. It could be a single word, it could be a whole sentence, that could be a whole book. A String can be as long as you like. But it consists of a sequence of characters. A string in Java is always written within double-quotes. So it tells me here in the comment a number of colors that are recognised. So if I type in, for example, double quote, green and double quote and click OK, then the color of the circle here has just changed to green. So I have asked the circle to please change its color to green by invoking the changeColor method. And the circle has done so. And so we can see here... So the lessons so far is: a Java program consists of a set of classes, which we see here in the main diagram. From each class, you can create objects. From a class you can create multiple objects – as many as you like. Once you have an object, you can communicate with the object via method calls. Each object offers a set of methods that you can call. When you see the methods of an object, it will tell you the name of the method and it will tell you whether it has any parameters. And if it has parameters, it will tell you what the type and the name of the parameter is. And also, if you invoke it, here is a comment that tells you a little bit more information about the method and its parameters. So these other concepts so far. They are really important fundamental concepts. The next thing I would like to introduce is the concept of "state". Every object maintains its on state. And what that means we can investigate by looking inside the object. So if I take an object here, you can't see the bottom of the menu here because it goes out of the screen. But if you... Let's see whether I can get it on screen. If I make that really small. You can see the bottom of the menu here now. You see there is an 'Inspect' command here at the bottom of your context menu. If you choose 'inspect' then you're essentially opening up the object and you can look inside the object. And we can see, when we essentially open the object up and look inside, we can see that there is data stored in the object.  It shows here what kind of data is stored for every object. We can see for this circle – this is circle3 – it stores a diameter, an x position, a y position, a color and a flag that tells me whether this circle is currently visible or not. And here we see the data types. We see the diameter, x position, y position are ints. So they are numbers, whole numbers. The color is a string, and the isVisible flag is another data type which we haven't seen before, which is a 'boolean'. A boolean is a data type that can have only two possible values: they can be true or false and nothing else. In this case, it is true. If we look at one of our other circles – so let's say we look at circle1 – and we also inspect this one, and we compare, we can see that this circle has exactly the same 'fields'. These bits of data that are stored inside an object are called 'fields'. So – sometimes, by the way, again, there's a different name for it. Sometimes they are also called 'instance variables'. An instance variable and a field is the same thing. So, here, an object, if I have a second object, in this case, it has exactly the same fields as that object. And that is because they are of the same class. Because the class Circle up here will define what kinds of fields each instance of the circle has. So all circle objects will have the same fields. They will all have diameter, x position, y position, color, isVisible. But then the values that are stored for each field, they are specific to the object. So, for example, the diameter of this circle is 12, the diameter of this circle is 68. So they each can have a different diameter. That is the same for all classes. For example, if you think of a class 'Student', and you yourself are an object of that class, you are an object of class Student. Then we can say every student has the same kind of information. So every student has a name and an address, and a student ID, which is our k-number, and an email address. So you all have the different kind of information, but the actual values for that information is different for each of you. So for each of you, your name is different, your k-number is different, and so on,  your email address is different. But the type of information that is available is the same. So the fields in the objects are the same and the values for each field are individual for every object. And in fact, we can change the value. So if I want change the diameter value here for circle number one, which is currently 12, the only way to do it – you can't just go in there and manipulate the value – the only way you can do something with an object is via method calls. So if I wanted to make this diameter now something different, if I want it to be 24, I go to the circle and I say 'changeSize'. And I say to the circle: "Please change your size to 24". I click OK. And you can see that here the value for the diameter field now has changed to 24. And it's also become bigger here on the screen. The other important thing is: if you look at objects, the state of objects of different classes – so now here I'm inspecting a triangle object – I can see the triangle does not have a diameter. Instead, it has a height and a width. So objects of different classes can have different fields because, again, the class defines what fields  its objects will have. And so, if the object is of a different class, it will have different fields, even though some of the fields here are the same, but that is more or less coincidental. They can have any fields they want. In this case, they are similar because they're both geometric shapes. So there is of course some similarity, but they are not the same. The set of values that are stored in an object collectively is called its 'state'. So we can say: this triangle is in this state; that it has this particular height, this width, this position, this color, and so on. So the whole set of values that defines the current look and feel of an object is its state. And so if two objects have exactly the same state, they are still two objects, but they look very similar. They will have the same characteristics. And that can happen, you know, so that we can have two triangles that are exactly the same size, same color, same position. Then we say their state is the same. And if we, say, we tell the object to move to the left a bit, then we're changing its state. We're asking it to change one element of its state. Okay, I will stop here. This is the first run through the first look at classes and objects and BlueJ. What I want you to do now is – if you haven't done so already – install BlueJ, download the book projects and then open the figures project, which you will find in the 'chapter01' section of the book projects, and try to replay what I have done here. Try to create a few shapes, make them visible, move them around on screen, and make sure that you can do exactly what I have done here in this video. Familiarise yourself with the BlueJ interface. And then we will take it from here. That's all for today. I see you next time. Bye-bye.
